#include <iostream>
#include <vector>
#include <stack>
#include <algorithm>
using namespace std;

#define for_tests(t, tt) int t; scanf("%d", &t); for(int tt = 1; tt <= t; tt++)
#define fst first
#define snd second

#define pb push_back

typedef unsigned long long ull;
typedef long long ll;
template<typename T> inline T abs(T t) { return t < 0? -t : t; }


class Point{
public:
    int x, y;
    bool operator < (Point _aux) {
        return (this->y==_aux.y)? this->x<_aux.x : this->y < _aux.y;
    }
};

Point pivot;\
vector<Point> points;

int posLeftMost();																//Position for Bottommost/leftmost point
int crossProduct(Point a, Point b, Point c);									//Direction to follow
int sqrDist(Point a, Point b);													//pow(Distance between 2 points,2)
bool POLAR_ORDER(Point a, Point b);												//Order function used in sort (i.angle, ii.ray)
stack<Point> grahamScan(vector<Point> &points);									//graham's Scan

int main()  {
	points = {{0, 3}, {1, 1}, {2, 2}, {4, 4},{0, 0}, {1, 2}, {3, 1}, {3, 3}};
    int n;
    Point aux;
	/*while(cin >> n && n!=0){
		for(int i=0;i<n;i++){
			cin >> aux.x >> aux.y;
			points.pb(aux);
		}
	*/
		stack<Point> hull = grahamScan(points);
		while (!hull.empty()){
		    Point p = hull.top();
		    hull.pop();

		    printf("(%d, %d)\n", p.x, p.y);
		}
//    }
    return 0;
}

/*******************************************************************************
*******************************************************************************/
int posLeftMost(){
	int leastY=0;
	for(int i=1; i<points.size(); i++)	
		if (points[i] < points[leastY]) leastY = i;								
	return leastY;
}

int crossProduct(Point a, Point b, Point c){
    int prodVetorial = (b.x-a.x)*(c.y-a.y) - (b.y-a.y)*(c.x-a.x);
    return (prodVetorial==0)? 0 :(prodVetorial>0)? -1 : 1;						//Collinear, left(counterclock), right(clockwise)
}

int sqrDist(Point a, Point b){
    return (a.x-b.x)*(a.x-b.x) + (a.y-b.y)*(a.y-b.y);
}

bool POLAR_ORDER(Point a, Point b){
    return (crossProduct(pivot,a,b)==0)? (sqrDist(pivot, a) < sqrDist(pivot, b)) 
    							       : ((crossProduct(pivot, a, b) == -1));
}

stack<Point> grahamScan(vector<Point> &points){
    stack<Point> hull;
    if (points.size() < 3) return hull;											//Needs 3 points at least
   
	int leastY=posLeftMost();
	swap(points[leastY], points[0]);
    pivot = points[0];															//Take the pivot element
    
    sort(points.begin()+1, points.end(), POLAR_ORDER);							//Put in polar order

    hull.push(points[0]);
    hull.push(points[1]);
    hull.push(points[2]);

    for (int i = 3; i < points.size(); i++) {
        Point top = hull.top();
        hull.pop();
        printf("\t\tTOP: [%i, %i]\n", top.x, top.y);
        while(crossProduct(hull.top(), top, points[i]) != -1){
            top = hull.top();
            hull.pop();
        }
        
        hull.push(top);
        hull.push(points[i]);
        printf("PUSH TOP: [%i, %i]\n", top.x, top.y);
        printf("PUSH Pos(%i): [%i, %i]\n", i, top.x, top.y);
    }
	
    return hull;
}

